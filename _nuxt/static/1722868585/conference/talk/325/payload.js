__NUXT_JSONP__("/conference/talk/325", (function(a){return {data:[{speechData:{id:325,begin_time:"2024-09-22T05:45:00Z",end_time:"2024-09-22T06:30:00Z",is_remote:false,location:"5-r1",youtube_id:a,title:"What happens when you import a module?",category:"CORE",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:true,abstract:"We all \"import\" modules . But how does Python find and load modules, and making their definitions available? The answer is surprisingly complex. This talk walks you through the world of module importation, from the differences between \"import\" and \"from .. import\" to the load path, to finders and loaders. Even if you've been using Python for many years, you will likely discover quite a lot about what happens behind the `import` statement.",detailed_description:"Modules are a key feature of Python, allowing us to easily reuse our own code and take advantage of publicly available modules from PyPI. It's a rare program that doesn't include at least one \"import\" statement. But what actually happens when we import a module? How does Python find our file? How does it decide whether it should even try to find our module? And after it finds our module file, how does Python load it into memory, assigning to its attributes?\r\n\r\nIn this talk, I'll walk you through what happens when you \"import\" a module into Python. The mechanism is surprisingly complex, in no small part because it has to take so many possibilities into consideration. \r\n\r\nAmong other things, I'll talk about:\r\n\r\n- `import` assigns variables, as do all of its variations\r\n- Where does `import ` look for module files? \r\n- How finders look for modules, and how we can simulate them in Python code\r\n- What a `meta_path` finder is, and why they're needed\r\n- Why you might want to create a custom finder, and how you could do that\r\n- Once a module file is found, how a loader is used to load it\r\n- How global variables in a module become attributes on a module object\r\n- How `importlib` gives us access to the underlying module system\r\n- How reloading does (and doesn't) work, when you might need it, and how to automate it (if you dare)\r\n\r\nIf you've ever imported a module (and you most certainly have), then this talk will pull back the curtain a bit, helping you to understand what's happening under the hood.",slide_link:a,slido_embed_link:a,hackmd_embed_link:a,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002Fa1\u002Fb5\u002Fa1b59885025365453010497e0e846ecb.jpg",name:"Reuven M. Lerner",github_profile_url:"https:\u002F\u002Fgithub.com\u002Freuven",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Freuvenmlerner",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Freuvenmlerner",bio:"Teaching Python and data science around the world since 1995. Author of the books \"Python Workout\" and \"Pandas Workout\". Publisher of the \"Better developers\" and \"Bamboo Weekly\" newsletters.  I spend each day trying to help people improve their Python skills."}],event_type:"talk"}}],fetch:{},mutations:[]}}("")));