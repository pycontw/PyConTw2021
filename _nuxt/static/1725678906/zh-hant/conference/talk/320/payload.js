__NUXT_JSONP__("/zh-hant/conference/talk/320", (function(a,b){b.id=320;b.begin_time="2024-09-22T03:30:00Z";b.end_time="2024-09-22T04:00:00Z";b.is_remote=false;b.location="6-r2";b.youtube_id=a;b.title="全方位強化 Python 服務可觀測性：以 FastAPI 和 Grafana Stack 為例";b.category="PRAC";b.language="ZHZH";b.python_level="INTERMEDIATE";b.recording_policy=true;b.abstract="當你的 Python 服務總是噤聲不語，並且輸出成為判斷服務狀態的唯一依據時，它就變成了一個極端的黑箱——非全好即全壞，中間沒有任何過渡地帶來警示潛在問題或進行事後分析。可觀測性（Observability）的目的是提升服務透明度，將黑箱轉變為白箱，讓我們不僅了解服務的當前狀態，還能在問題發生時迅速進行定位和解決。本次分享將簡介可觀測性概念，並以 FastAPI 為例介紹如何利用 Prometheus、OpenTelemetry 和 Grafana 等工具增強可觀測性。";b.detailed_description="應用程式的真正價值在於其能夠穩定地為使用者提供服務並持續創造價值。在運行過程中，錯誤的發生難以避免，因此，迅速的故障排除對維持服務的穩定性至關重要。當服務具備良好的可觀測性，不僅可以讓我們對系統狀態有清晰的了解，還能加速問題的定位與解決。\r\n\r\n本次分享將涵蓋以下內容：\r\n\r\n1. 可觀測性基礎介紹，包括 Logs、Metrics 和 Traces，探討它們之間的關係及如何搭配應用。\r\n2. 介紹如何使用 OpenTelemetry、Prometheus、Loki、Tempo、Grafana 等工具來強化服務的可觀測性。\r\n3. 展示如何透過 Grafana 統一查閱 Logs、Metrics 和 Traces，透過實際案例展示可觀測性在實際情境中的應用。\r\n\r\n雖然案例以 FastAPI 和 Grafana Stack 為核心，但可觀測性的概念適用於各種框架，因此，即使你不使用 FastAPI 或 Grafana，仍可從本次分享中獲益。\r\n\r\n無論你是尋求解決 Bug 的開發人員或是努力快速定位線上問題的運維人員，了解可觀測性將是你能迅速解決問題的關鍵。";b.slide_link=a;b.slido_embed_link=a;b.hackmd_embed_link=a;b.speakers=[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002Fb5\u002F4f\u002Fb54f69030cdcc05ca36a5303ac5684d5.jpg",name:"劉義瑋 Blueswen",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fblueswen",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002FBlueswenTw",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Fblueswen\u002F",bio:"目前擔任 DevOps Engineer，樂於分享與交流技術。\r\n\r\n擔任開發人員時前端、後端、ML 服務都略有接觸，有感於問題排除與監控的不足，於是開始研究與推廣可觀測性。\r\n\r\n個人網站：https:\u002F\u002Fblueswen.github.io\u002F"}];b.event_type="talk";return {data:[{speechData:b}],fetch:{},mutations:[["setSpeechData",b]]}}("",{})));